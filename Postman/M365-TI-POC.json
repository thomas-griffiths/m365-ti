{
  "info": {
    "name": "M365-TI-POC",
    "_postman_id": "00000000-0000-4000-8000-000000000001",
    "description": "End-to-end demo: URLhaus IOCs -> scan M365 mailbox -> ensure category -> tag first hit -> send summary. All secrets come from environment variables.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get Token (client_credentials)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/x-www-form-urlencoded" }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            { "key": "client_id", "value": "{{client_id}}" },
            { "key": "client_secret", "value": "{{client_secret}}" },
            { "key": "scope", "value": "https://graph.microsoft.com/.default" },
            { "key": "grant_type", "value": "client_credentials" }
          ]
        },
        "url": {
          "raw": "https://login.microsoftonline.com/{{tenant_id}}/oauth2/v2.0/token",
          "protocol": "https",
          "host": ["login","microsoftonline","com"],
          "path": ["{{tenant_id}}","oauth2","v2.0","token"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const json = pm.response.json();",
              "pm.test('Got access_token', () => pm.expect(json).to.have.property('access_token'));",
              "pm.environment.set('access_token', json.access_token);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get IOCs (URLhaus recent)",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Auth-Key", "value": "{{urlhaus_key}}" },
          { "key": "Accept", "value": "application/json" }
        ],
        "url": {
          "raw": "https://urlhaus-api.abuse.ch/v1/urls/recent/limit/200/",
          "protocol": "https",
          "host": ["urlhaus-api","abuse","ch"],
          "path": ["v1","urls","recent","limit","200",""]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "const data = pm.response.json();",
              "const urls = Array.isArray(data.urls) ? data.urls : [];",
              "const hosts = urls.map(u => (u && u.host ? String(u.host).toLowerCase() : null)).filter(Boolean);",
              "const uniq = [...new Set(hosts)];",
              "pm.environment.set('ioc_hosts', JSON.stringify(uniq));",
              "pm.environment.set('ioc_hosts_text', uniq.join('\\n'));",
              "pm.environment.set('ioc_count', String(uniq.length));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "List Messages & Match IOCs",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "url": {
          "raw": "{{graph}}/users/{{user_upn}}/messages?$top={{top}}&$select=id,subject,receivedDateTime,bodyPreview,categories",
          "host": ["{{graph}}"],
          "path": ["users","{{user_upn}}","messages"],
          "query": [
            { "key": "$top", "value": "{{top}}" },
            { "key": "$select", "value": "id,subject,receivedDateTime,bodyPreview,categories" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "const res = pm.response.json();",
              "const msgs = Array.isArray(res.value) ? res.value : [];",
              "let iocs = [];",
              "try { iocs = JSON.parse(pm.environment.get('ioc_hosts') || '[]'); } catch(e) { iocs = []; }",
              "const needles = new Set(iocs.map(x => String(x || '').toLowerCase()).filter(Boolean));",
              "const hits = [];",
              "for (const m of msgs) {",
              "  const subject = (m.subject || '').toLowerCase();",
              "  const preview = (m.bodyPreview || '').toLowerCase();",
              "  for (const n of needles) {",
              "    if (!n) continue;",
              "    if (subject.includes(n) || preview.includes(n)) {",
              "      hits.push({ id: m.id, subject: m.subject || '(no subject)', receivedDateTime: m.receivedDateTime || '', match: n });",
              "      break;",
              "    }",
              "  }",
              "}",
              "pm.environment.set('hits_json', JSON.stringify(hits));",
              "pm.environment.set('hits_count', String(hits.length));",
              "pm.environment.set('hits_text', hits.map(h => `â€¢ ${h.receivedDateTime} | ${h.subject} | match: ${h.match}`).join('\\n'));",
              "pm.environment.set('message_id_to_tag', hits[0] ? hits[0].id : '');",
              "console.log('IOC hits:', hits.length);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Ensure Category (create if missing)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": {
          "raw": "{{graph}}/users/{{user_upn}}/outlook/masterCategories",
          "host": ["{{graph}}"],
          "path": ["users","{{user_upn}}","outlook","masterCategories"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"displayName\": \"{{category}}\",\n  \"color\": \"preset0\"\n}"
        },
        "description": "Requires MailboxSettings.ReadWrite (Application). 409 Conflict is acceptable if the category already exists."
      }
    },
    {
      "name": "Tag First Hit (if any)",
      "request": {
        "method": "PATCH",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": {
          "raw": "{{graph}}/users/{{user_upn}}/messages/{{message_id_to_tag}}",
          "host": ["{{graph}}"],
          "path": ["users","{{user_upn}}","messages","{{message_id_to_tag}}"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"categories\": [\"{{category}}\"]\n}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const id = pm.environment.get('message_id_to_tag');",
              "if (!id) {",
              "  pm.execution.interrupted = true;",
              "  throw new Error('No IOC hits found in previous step (message_id_to_tag is empty).');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Send IOC Summary Email",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": {
          "raw": "{{graph}}/users/{{user_upn}}/sendMail",
          "host": ["{{graph}}"],
          "path": ["users","{{user_upn}}","sendMail"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"message\": {\n    \"subject\": \"[Demo] URLhaus IOC Summary ({{ioc_count}} IOCs, {{hits_count}} hits)\",\n    \"body\": {\"contentType\": \"HTML\", \"content\": \"<p><strong>IOC hosts (subset):</strong></p><pre>{{ioc_hosts_text}}</pre><p><strong>Mailbox hits (scanned last {{top}} messages):</strong></p><pre>{{hits_text}}</pre>\"},\n    \"toRecipients\": [{\"emailAddress\": {\"address\": \"{{summary_to}}\"}}]\n  },\n  \"saveToSentItems\": true\n}"
        }
      }
    }
  ],
  "event": [],
  "variable": [
    { "key": "graph", "value": "https://graph.microsoft.com/v1.0" },
    { "key": "category", "value": "Suspect-IOC" },
    { "key": "top", "value": "25" },
    { "key": "access_token", "value": "" },
    { "key": "message_id_to_tag", "value": "" },
    { "key": "ioc_hosts", "value": "[]" },
    { "key": "ioc_hosts_text", "value": "" },
    { "key": "ioc_count", "value": "0" },
    { "key": "hits_json", "value": "[]" },
    { "key": "hits_text", "value": "" },
    { "key": "hits_count", "value": "0" },
    { "key": "tenant_id", "value": "" },
    { "key": "client_id", "value": "" },
    { "key": "client_secret", "value": "" },
    { "key": "user_upn", "value": "" },
    { "key": "summary_to", "value": "" },
    { "key": "urlhaus_key", "value": "" }
  ]
}
